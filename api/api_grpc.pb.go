// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.4
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CatalogClient is the client API for Catalog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogClient interface {
	GoodCreate(ctx context.Context, in *GoodCreateRequest, opts ...grpc.CallOption) (*GoodCreateResponse, error)
	GoodGet(ctx context.Context, in *GoodGetRequest, opts ...grpc.CallOption) (*GoodGetResponse, error)
	GoodList(ctx context.Context, opts ...grpc.CallOption) (Catalog_GoodListClient, error)
	GoodUpdate(ctx context.Context, in *GoodUpdateRequest, opts ...grpc.CallOption) (*GoodUpdateResponse, error)
	GoodDelete(ctx context.Context, in *GoodDeleteRequest, opts ...grpc.CallOption) (*GoodDeleteResponse, error)
	CountryCreate(ctx context.Context, in *CountryCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CountryGet(ctx context.Context, in *CountryGetRequest, opts ...grpc.CallOption) (*CountryGetResponse, error)
	CountryList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountryListResponse, error)
	CountryUpdate(ctx context.Context, in *CountryUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CountryDelete(ctx context.Context, in *CountryDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnitOfMeasureCreate(ctx context.Context, in *UnitOfMeasureCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnitOfMeasureGet(ctx context.Context, in *UnitOfMeasureGetRequest, opts ...grpc.CallOption) (*UnitOfMeasureGetResponse, error)
	UnitOfMeasureList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UnitOfMeasureListResponse, error)
	UnitOfMeasureUpdate(ctx context.Context, in *UnitOfMeasureUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnitOfMeasureDelete(ctx context.Context, in *UnitOfMeasureDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type catalogClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogClient(cc grpc.ClientConnInterface) CatalogClient {
	return &catalogClient{cc}
}

func (c *catalogClient) GoodCreate(ctx context.Context, in *GoodCreateRequest, opts ...grpc.CallOption) (*GoodCreateResponse, error) {
	out := new(GoodCreateResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog/GoodCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GoodGet(ctx context.Context, in *GoodGetRequest, opts ...grpc.CallOption) (*GoodGetResponse, error) {
	out := new(GoodGetResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog/GoodGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GoodList(ctx context.Context, opts ...grpc.CallOption) (Catalog_GoodListClient, error) {
	stream, err := c.cc.NewStream(ctx, &Catalog_ServiceDesc.Streams[0], "/catalog.api.catalog/GoodList", opts...)
	if err != nil {
		return nil, err
	}
	x := &catalogGoodListClient{stream}
	return x, nil
}

type Catalog_GoodListClient interface {
	Send(*GoodListRequest) error
	Recv() (*GoodListResponse, error)
	grpc.ClientStream
}

type catalogGoodListClient struct {
	grpc.ClientStream
}

func (x *catalogGoodListClient) Send(m *GoodListRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *catalogGoodListClient) Recv() (*GoodListResponse, error) {
	m := new(GoodListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *catalogClient) GoodUpdate(ctx context.Context, in *GoodUpdateRequest, opts ...grpc.CallOption) (*GoodUpdateResponse, error) {
	out := new(GoodUpdateResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog/GoodUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) GoodDelete(ctx context.Context, in *GoodDeleteRequest, opts ...grpc.CallOption) (*GoodDeleteResponse, error) {
	out := new(GoodDeleteResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog/GoodDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) CountryCreate(ctx context.Context, in *CountryCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog/CountryCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) CountryGet(ctx context.Context, in *CountryGetRequest, opts ...grpc.CallOption) (*CountryGetResponse, error) {
	out := new(CountryGetResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog/CountryGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) CountryList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountryListResponse, error) {
	out := new(CountryListResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog/CountryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) CountryUpdate(ctx context.Context, in *CountryUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog/CountryUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) CountryDelete(ctx context.Context, in *CountryDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog/CountryDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UnitOfMeasureCreate(ctx context.Context, in *UnitOfMeasureCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog/UnitOfMeasureCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UnitOfMeasureGet(ctx context.Context, in *UnitOfMeasureGetRequest, opts ...grpc.CallOption) (*UnitOfMeasureGetResponse, error) {
	out := new(UnitOfMeasureGetResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog/UnitOfMeasureGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UnitOfMeasureList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UnitOfMeasureListResponse, error) {
	out := new(UnitOfMeasureListResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog/UnitOfMeasureList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UnitOfMeasureUpdate(ctx context.Context, in *UnitOfMeasureUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog/UnitOfMeasureUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogClient) UnitOfMeasureDelete(ctx context.Context, in *UnitOfMeasureDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog/UnitOfMeasureDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogServer is the server API for Catalog service.
// All implementations must embed UnimplementedCatalogServer
// for forward compatibility
type CatalogServer interface {
	GoodCreate(context.Context, *GoodCreateRequest) (*GoodCreateResponse, error)
	GoodGet(context.Context, *GoodGetRequest) (*GoodGetResponse, error)
	GoodList(Catalog_GoodListServer) error
	GoodUpdate(context.Context, *GoodUpdateRequest) (*GoodUpdateResponse, error)
	GoodDelete(context.Context, *GoodDeleteRequest) (*GoodDeleteResponse, error)
	CountryCreate(context.Context, *CountryCreateRequest) (*emptypb.Empty, error)
	CountryGet(context.Context, *CountryGetRequest) (*CountryGetResponse, error)
	CountryList(context.Context, *emptypb.Empty) (*CountryListResponse, error)
	CountryUpdate(context.Context, *CountryUpdateRequest) (*emptypb.Empty, error)
	CountryDelete(context.Context, *CountryDeleteRequest) (*emptypb.Empty, error)
	UnitOfMeasureCreate(context.Context, *UnitOfMeasureCreateRequest) (*emptypb.Empty, error)
	UnitOfMeasureGet(context.Context, *UnitOfMeasureGetRequest) (*UnitOfMeasureGetResponse, error)
	UnitOfMeasureList(context.Context, *emptypb.Empty) (*UnitOfMeasureListResponse, error)
	UnitOfMeasureUpdate(context.Context, *UnitOfMeasureUpdateRequest) (*emptypb.Empty, error)
	UnitOfMeasureDelete(context.Context, *UnitOfMeasureDeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCatalogServer()
}

// UnimplementedCatalogServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogServer struct {
}

func (UnimplementedCatalogServer) GoodCreate(context.Context, *GoodCreateRequest) (*GoodCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodCreate not implemented")
}
func (UnimplementedCatalogServer) GoodGet(context.Context, *GoodGetRequest) (*GoodGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodGet not implemented")
}
func (UnimplementedCatalogServer) GoodList(Catalog_GoodListServer) error {
	return status.Errorf(codes.Unimplemented, "method GoodList not implemented")
}
func (UnimplementedCatalogServer) GoodUpdate(context.Context, *GoodUpdateRequest) (*GoodUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodUpdate not implemented")
}
func (UnimplementedCatalogServer) GoodDelete(context.Context, *GoodDeleteRequest) (*GoodDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodDelete not implemented")
}
func (UnimplementedCatalogServer) CountryCreate(context.Context, *CountryCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountryCreate not implemented")
}
func (UnimplementedCatalogServer) CountryGet(context.Context, *CountryGetRequest) (*CountryGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountryGet not implemented")
}
func (UnimplementedCatalogServer) CountryList(context.Context, *emptypb.Empty) (*CountryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountryList not implemented")
}
func (UnimplementedCatalogServer) CountryUpdate(context.Context, *CountryUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountryUpdate not implemented")
}
func (UnimplementedCatalogServer) CountryDelete(context.Context, *CountryDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountryDelete not implemented")
}
func (UnimplementedCatalogServer) UnitOfMeasureCreate(context.Context, *UnitOfMeasureCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitOfMeasureCreate not implemented")
}
func (UnimplementedCatalogServer) UnitOfMeasureGet(context.Context, *UnitOfMeasureGetRequest) (*UnitOfMeasureGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitOfMeasureGet not implemented")
}
func (UnimplementedCatalogServer) UnitOfMeasureList(context.Context, *emptypb.Empty) (*UnitOfMeasureListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitOfMeasureList not implemented")
}
func (UnimplementedCatalogServer) UnitOfMeasureUpdate(context.Context, *UnitOfMeasureUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitOfMeasureUpdate not implemented")
}
func (UnimplementedCatalogServer) UnitOfMeasureDelete(context.Context, *UnitOfMeasureDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitOfMeasureDelete not implemented")
}
func (UnimplementedCatalogServer) mustEmbedUnimplementedCatalogServer() {}

// UnsafeCatalogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogServer will
// result in compilation errors.
type UnsafeCatalogServer interface {
	mustEmbedUnimplementedCatalogServer()
}

func RegisterCatalogServer(s grpc.ServiceRegistrar, srv CatalogServer) {
	s.RegisterService(&Catalog_ServiceDesc, srv)
}

func _Catalog_GoodCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GoodCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog/GoodCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GoodCreate(ctx, req.(*GoodCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GoodGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GoodGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog/GoodGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GoodGet(ctx, req.(*GoodGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GoodList_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CatalogServer).GoodList(&catalogGoodListServer{stream})
}

type Catalog_GoodListServer interface {
	Send(*GoodListResponse) error
	Recv() (*GoodListRequest, error)
	grpc.ServerStream
}

type catalogGoodListServer struct {
	grpc.ServerStream
}

func (x *catalogGoodListServer) Send(m *GoodListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *catalogGoodListServer) Recv() (*GoodListRequest, error) {
	m := new(GoodListRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Catalog_GoodUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GoodUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog/GoodUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GoodUpdate(ctx, req.(*GoodUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_GoodDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).GoodDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog/GoodDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).GoodDelete(ctx, req.(*GoodDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_CountryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CountryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog/CountryCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CountryCreate(ctx, req.(*CountryCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_CountryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CountryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog/CountryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CountryGet(ctx, req.(*CountryGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_CountryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CountryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog/CountryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CountryList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_CountryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CountryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog/CountryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CountryUpdate(ctx, req.(*CountryUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_CountryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).CountryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog/CountryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).CountryDelete(ctx, req.(*CountryDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UnitOfMeasureCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitOfMeasureCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UnitOfMeasureCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog/UnitOfMeasureCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UnitOfMeasureCreate(ctx, req.(*UnitOfMeasureCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UnitOfMeasureGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitOfMeasureGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UnitOfMeasureGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog/UnitOfMeasureGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UnitOfMeasureGet(ctx, req.(*UnitOfMeasureGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UnitOfMeasureList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UnitOfMeasureList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog/UnitOfMeasureList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UnitOfMeasureList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UnitOfMeasureUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitOfMeasureUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UnitOfMeasureUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog/UnitOfMeasureUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UnitOfMeasureUpdate(ctx, req.(*UnitOfMeasureUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Catalog_UnitOfMeasureDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitOfMeasureDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogServer).UnitOfMeasureDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog/UnitOfMeasureDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogServer).UnitOfMeasureDelete(ctx, req.(*UnitOfMeasureDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Catalog_ServiceDesc is the grpc.ServiceDesc for Catalog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Catalog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.api.catalog",
	HandlerType: (*CatalogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GoodCreate",
			Handler:    _Catalog_GoodCreate_Handler,
		},
		{
			MethodName: "GoodGet",
			Handler:    _Catalog_GoodGet_Handler,
		},
		{
			MethodName: "GoodUpdate",
			Handler:    _Catalog_GoodUpdate_Handler,
		},
		{
			MethodName: "GoodDelete",
			Handler:    _Catalog_GoodDelete_Handler,
		},
		{
			MethodName: "CountryCreate",
			Handler:    _Catalog_CountryCreate_Handler,
		},
		{
			MethodName: "CountryGet",
			Handler:    _Catalog_CountryGet_Handler,
		},
		{
			MethodName: "CountryList",
			Handler:    _Catalog_CountryList_Handler,
		},
		{
			MethodName: "CountryUpdate",
			Handler:    _Catalog_CountryUpdate_Handler,
		},
		{
			MethodName: "CountryDelete",
			Handler:    _Catalog_CountryDelete_Handler,
		},
		{
			MethodName: "UnitOfMeasureCreate",
			Handler:    _Catalog_UnitOfMeasureCreate_Handler,
		},
		{
			MethodName: "UnitOfMeasureGet",
			Handler:    _Catalog_UnitOfMeasureGet_Handler,
		},
		{
			MethodName: "UnitOfMeasureList",
			Handler:    _Catalog_UnitOfMeasureList_Handler,
		},
		{
			MethodName: "UnitOfMeasureUpdate",
			Handler:    _Catalog_UnitOfMeasureUpdate_Handler,
		},
		{
			MethodName: "UnitOfMeasureDelete",
			Handler:    _Catalog_UnitOfMeasureDelete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GoodList",
			Handler:       _Catalog_GoodList_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}

// CatalogIfaceClient is the client API for CatalogIface service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CatalogIfaceClient interface {
	GoodCreate(ctx context.Context, in *GoodCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GoodGet(ctx context.Context, in *GoodGetRequest, opts ...grpc.CallOption) (*GoodGetResponse, error)
	GoodList(ctx context.Context, in *GoodListRequest, opts ...grpc.CallOption) (*GoodListResponse, error)
	GoodUpdate(ctx context.Context, in *GoodUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GoodDelete(ctx context.Context, in *GoodDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CountryCreate(ctx context.Context, in *CountryCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CountryGet(ctx context.Context, in *CountryGetRequest, opts ...grpc.CallOption) (*CountryGetResponse, error)
	CountryList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountryListResponse, error)
	CountryUpdate(ctx context.Context, in *CountryUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CountryDelete(ctx context.Context, in *CountryDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnitOfMeasureCreate(ctx context.Context, in *UnitOfMeasureCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnitOfMeasureGet(ctx context.Context, in *UnitOfMeasureGetRequest, opts ...grpc.CallOption) (*UnitOfMeasureGetResponse, error)
	UnitOfMeasureList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UnitOfMeasureListResponse, error)
	UnitOfMeasureUpdate(ctx context.Context, in *UnitOfMeasureUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UnitOfMeasureDelete(ctx context.Context, in *UnitOfMeasureDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type catalogIfaceClient struct {
	cc grpc.ClientConnInterface
}

func NewCatalogIfaceClient(cc grpc.ClientConnInterface) CatalogIfaceClient {
	return &catalogIfaceClient{cc}
}

func (c *catalogIfaceClient) GoodCreate(ctx context.Context, in *GoodCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog_iface/GoodCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogIfaceClient) GoodGet(ctx context.Context, in *GoodGetRequest, opts ...grpc.CallOption) (*GoodGetResponse, error) {
	out := new(GoodGetResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog_iface/GoodGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogIfaceClient) GoodList(ctx context.Context, in *GoodListRequest, opts ...grpc.CallOption) (*GoodListResponse, error) {
	out := new(GoodListResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog_iface/GoodList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogIfaceClient) GoodUpdate(ctx context.Context, in *GoodUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog_iface/GoodUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogIfaceClient) GoodDelete(ctx context.Context, in *GoodDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog_iface/GoodDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogIfaceClient) CountryCreate(ctx context.Context, in *CountryCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog_iface/CountryCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogIfaceClient) CountryGet(ctx context.Context, in *CountryGetRequest, opts ...grpc.CallOption) (*CountryGetResponse, error) {
	out := new(CountryGetResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog_iface/CountryGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogIfaceClient) CountryList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CountryListResponse, error) {
	out := new(CountryListResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog_iface/CountryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogIfaceClient) CountryUpdate(ctx context.Context, in *CountryUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog_iface/CountryUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogIfaceClient) CountryDelete(ctx context.Context, in *CountryDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog_iface/CountryDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogIfaceClient) UnitOfMeasureCreate(ctx context.Context, in *UnitOfMeasureCreateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog_iface/UnitOfMeasureCreate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogIfaceClient) UnitOfMeasureGet(ctx context.Context, in *UnitOfMeasureGetRequest, opts ...grpc.CallOption) (*UnitOfMeasureGetResponse, error) {
	out := new(UnitOfMeasureGetResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog_iface/UnitOfMeasureGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogIfaceClient) UnitOfMeasureList(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UnitOfMeasureListResponse, error) {
	out := new(UnitOfMeasureListResponse)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog_iface/UnitOfMeasureList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogIfaceClient) UnitOfMeasureUpdate(ctx context.Context, in *UnitOfMeasureUpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog_iface/UnitOfMeasureUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *catalogIfaceClient) UnitOfMeasureDelete(ctx context.Context, in *UnitOfMeasureDeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/catalog.api.catalog_iface/UnitOfMeasureDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CatalogIfaceServer is the server API for CatalogIface service.
// All implementations must embed UnimplementedCatalogIfaceServer
// for forward compatibility
type CatalogIfaceServer interface {
	GoodCreate(context.Context, *GoodCreateRequest) (*emptypb.Empty, error)
	GoodGet(context.Context, *GoodGetRequest) (*GoodGetResponse, error)
	GoodList(context.Context, *GoodListRequest) (*GoodListResponse, error)
	GoodUpdate(context.Context, *GoodUpdateRequest) (*emptypb.Empty, error)
	GoodDelete(context.Context, *GoodDeleteRequest) (*emptypb.Empty, error)
	CountryCreate(context.Context, *CountryCreateRequest) (*emptypb.Empty, error)
	CountryGet(context.Context, *CountryGetRequest) (*CountryGetResponse, error)
	CountryList(context.Context, *emptypb.Empty) (*CountryListResponse, error)
	CountryUpdate(context.Context, *CountryUpdateRequest) (*emptypb.Empty, error)
	CountryDelete(context.Context, *CountryDeleteRequest) (*emptypb.Empty, error)
	UnitOfMeasureCreate(context.Context, *UnitOfMeasureCreateRequest) (*emptypb.Empty, error)
	UnitOfMeasureGet(context.Context, *UnitOfMeasureGetRequest) (*UnitOfMeasureGetResponse, error)
	UnitOfMeasureList(context.Context, *emptypb.Empty) (*UnitOfMeasureListResponse, error)
	UnitOfMeasureUpdate(context.Context, *UnitOfMeasureUpdateRequest) (*emptypb.Empty, error)
	UnitOfMeasureDelete(context.Context, *UnitOfMeasureDeleteRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedCatalogIfaceServer()
}

// UnimplementedCatalogIfaceServer must be embedded to have forward compatible implementations.
type UnimplementedCatalogIfaceServer struct {
}

func (UnimplementedCatalogIfaceServer) GoodCreate(context.Context, *GoodCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodCreate not implemented")
}
func (UnimplementedCatalogIfaceServer) GoodGet(context.Context, *GoodGetRequest) (*GoodGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodGet not implemented")
}
func (UnimplementedCatalogIfaceServer) GoodList(context.Context, *GoodListRequest) (*GoodListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodList not implemented")
}
func (UnimplementedCatalogIfaceServer) GoodUpdate(context.Context, *GoodUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodUpdate not implemented")
}
func (UnimplementedCatalogIfaceServer) GoodDelete(context.Context, *GoodDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GoodDelete not implemented")
}
func (UnimplementedCatalogIfaceServer) CountryCreate(context.Context, *CountryCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountryCreate not implemented")
}
func (UnimplementedCatalogIfaceServer) CountryGet(context.Context, *CountryGetRequest) (*CountryGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountryGet not implemented")
}
func (UnimplementedCatalogIfaceServer) CountryList(context.Context, *emptypb.Empty) (*CountryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountryList not implemented")
}
func (UnimplementedCatalogIfaceServer) CountryUpdate(context.Context, *CountryUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountryUpdate not implemented")
}
func (UnimplementedCatalogIfaceServer) CountryDelete(context.Context, *CountryDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountryDelete not implemented")
}
func (UnimplementedCatalogIfaceServer) UnitOfMeasureCreate(context.Context, *UnitOfMeasureCreateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitOfMeasureCreate not implemented")
}
func (UnimplementedCatalogIfaceServer) UnitOfMeasureGet(context.Context, *UnitOfMeasureGetRequest) (*UnitOfMeasureGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitOfMeasureGet not implemented")
}
func (UnimplementedCatalogIfaceServer) UnitOfMeasureList(context.Context, *emptypb.Empty) (*UnitOfMeasureListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitOfMeasureList not implemented")
}
func (UnimplementedCatalogIfaceServer) UnitOfMeasureUpdate(context.Context, *UnitOfMeasureUpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitOfMeasureUpdate not implemented")
}
func (UnimplementedCatalogIfaceServer) UnitOfMeasureDelete(context.Context, *UnitOfMeasureDeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnitOfMeasureDelete not implemented")
}
func (UnimplementedCatalogIfaceServer) mustEmbedUnimplementedCatalogIfaceServer() {}

// UnsafeCatalogIfaceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CatalogIfaceServer will
// result in compilation errors.
type UnsafeCatalogIfaceServer interface {
	mustEmbedUnimplementedCatalogIfaceServer()
}

func RegisterCatalogIfaceServer(s grpc.ServiceRegistrar, srv CatalogIfaceServer) {
	s.RegisterService(&CatalogIface_ServiceDesc, srv)
}

func _CatalogIface_GoodCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogIfaceServer).GoodCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog_iface/GoodCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogIfaceServer).GoodCreate(ctx, req.(*GoodCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogIface_GoodGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogIfaceServer).GoodGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog_iface/GoodGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogIfaceServer).GoodGet(ctx, req.(*GoodGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogIface_GoodList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogIfaceServer).GoodList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog_iface/GoodList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogIfaceServer).GoodList(ctx, req.(*GoodListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogIface_GoodUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogIfaceServer).GoodUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog_iface/GoodUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogIfaceServer).GoodUpdate(ctx, req.(*GoodUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogIface_GoodDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GoodDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogIfaceServer).GoodDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog_iface/GoodDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogIfaceServer).GoodDelete(ctx, req.(*GoodDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogIface_CountryCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogIfaceServer).CountryCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog_iface/CountryCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogIfaceServer).CountryCreate(ctx, req.(*CountryCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogIface_CountryGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogIfaceServer).CountryGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog_iface/CountryGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogIfaceServer).CountryGet(ctx, req.(*CountryGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogIface_CountryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogIfaceServer).CountryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog_iface/CountryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogIfaceServer).CountryList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogIface_CountryUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogIfaceServer).CountryUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog_iface/CountryUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogIfaceServer).CountryUpdate(ctx, req.(*CountryUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogIface_CountryDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountryDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogIfaceServer).CountryDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog_iface/CountryDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogIfaceServer).CountryDelete(ctx, req.(*CountryDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogIface_UnitOfMeasureCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitOfMeasureCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogIfaceServer).UnitOfMeasureCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog_iface/UnitOfMeasureCreate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogIfaceServer).UnitOfMeasureCreate(ctx, req.(*UnitOfMeasureCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogIface_UnitOfMeasureGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitOfMeasureGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogIfaceServer).UnitOfMeasureGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog_iface/UnitOfMeasureGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogIfaceServer).UnitOfMeasureGet(ctx, req.(*UnitOfMeasureGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogIface_UnitOfMeasureList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogIfaceServer).UnitOfMeasureList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog_iface/UnitOfMeasureList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogIfaceServer).UnitOfMeasureList(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogIface_UnitOfMeasureUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitOfMeasureUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogIfaceServer).UnitOfMeasureUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog_iface/UnitOfMeasureUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogIfaceServer).UnitOfMeasureUpdate(ctx, req.(*UnitOfMeasureUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CatalogIface_UnitOfMeasureDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnitOfMeasureDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CatalogIfaceServer).UnitOfMeasureDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/catalog.api.catalog_iface/UnitOfMeasureDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CatalogIfaceServer).UnitOfMeasureDelete(ctx, req.(*UnitOfMeasureDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CatalogIface_ServiceDesc is the grpc.ServiceDesc for CatalogIface service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CatalogIface_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "catalog.api.catalog_iface",
	HandlerType: (*CatalogIfaceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GoodCreate",
			Handler:    _CatalogIface_GoodCreate_Handler,
		},
		{
			MethodName: "GoodGet",
			Handler:    _CatalogIface_GoodGet_Handler,
		},
		{
			MethodName: "GoodList",
			Handler:    _CatalogIface_GoodList_Handler,
		},
		{
			MethodName: "GoodUpdate",
			Handler:    _CatalogIface_GoodUpdate_Handler,
		},
		{
			MethodName: "GoodDelete",
			Handler:    _CatalogIface_GoodDelete_Handler,
		},
		{
			MethodName: "CountryCreate",
			Handler:    _CatalogIface_CountryCreate_Handler,
		},
		{
			MethodName: "CountryGet",
			Handler:    _CatalogIface_CountryGet_Handler,
		},
		{
			MethodName: "CountryList",
			Handler:    _CatalogIface_CountryList_Handler,
		},
		{
			MethodName: "CountryUpdate",
			Handler:    _CatalogIface_CountryUpdate_Handler,
		},
		{
			MethodName: "CountryDelete",
			Handler:    _CatalogIface_CountryDelete_Handler,
		},
		{
			MethodName: "UnitOfMeasureCreate",
			Handler:    _CatalogIface_UnitOfMeasureCreate_Handler,
		},
		{
			MethodName: "UnitOfMeasureGet",
			Handler:    _CatalogIface_UnitOfMeasureGet_Handler,
		},
		{
			MethodName: "UnitOfMeasureList",
			Handler:    _CatalogIface_UnitOfMeasureList_Handler,
		},
		{
			MethodName: "UnitOfMeasureUpdate",
			Handler:    _CatalogIface_UnitOfMeasureUpdate_Handler,
		},
		{
			MethodName: "UnitOfMeasureDelete",
			Handler:    _CatalogIface_UnitOfMeasureDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
